Fisheye Menus (in HCI)

A fisheye menu is a type of graphical user interface (GUI) widget that implements a fisheye perspective to display a potentially large set of items within a limited space. The core idea is to provide a detailed view of the items currently in focus or near the user's pointer, while simultaneously showing the surrounding items in a compressed or less detailed form.

Think of it like a fisheye camera lens: objects in the center appear larger and more distinct, while objects towards the edges are squeezed and distorted but still visible, maintaining context.

In the context of menus or lists, this means:

1.  **Focus Area:** The item(s) the user is currently interacting with (like hovering over) are expanded and displayed clearly.
2.  **Context Area:** Items further away from the focus are scaled down or simplified, allowing the user to see the overall range of options without them taking up excessive space.

This technique is useful for navigating long lists, timelines, or data visualizations where showing all items in full detail isn't feasible, but losing the context of where you are in the overall set is undesirable. It helps users quickly zoom into an area of interest while still understanding its position relative to the whole.

**The 10 Usability Heuristics (by Jakob Nielsen)**

These are a set of general principles for interaction design that are used for usability evaluation. They were created by Jakob Nielsen (based on work with Rolf Molich) in the early 1990s and are among the most cited usability principles. They serve as a checklist for assessing and improving the usability of a user interface.

Here are the 10 heuristics:

1.  **Visibility of system status:** The system should always keep users informed about what is going on, through appropriate feedback within reasonable time. (e.g., showing loading indicators, success messages)
2.  **Match between system and the real world:** The system should speak the users' language, with words, phrases, and concepts familiar to the user, rather than system-oriented terms. Follow real-world conventions, making information appear in a natural and logical order. (e.g., using icons that resemble real-world objects, having a shopping cart icon)
3.  **User control and freedom:** Users often choose system functions by mistake and will need a clearly marked "emergency exit" to leave the unwanted state without extended dialogue. Support undo and redo. (e.g., having a back button, cancel options, Ctrl+Z)
4.  **Consistency and standards:** Users should not have to wonder whether different words, situations, or actions mean the same thing. Follow platform conventions. (e.g., same icon representing the same action throughout the application, standard menu placement)
5.  **Error prevention:** Even better than good error messages is a careful design which prevents a problem from occurring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action. (e.g., disabling submit buttons until all required fields are filled, asking "Are you sure you want to delete?")
6.  **Recognition rather than recall:** Minimize the user's memory load by making objects, actions, and options visible. The user should not have to remember information from one part of the dialogue to another. Instructions for use of the system should be visible or easily retrievable whenever appropriate. (e.g., displaying available options, recently used items)
7.  **Flexibility and efficiency of use:** Accelerators—unseen by the novice user—may often speed up the interaction for the expert user such that the system can cater to both inexperienced and experienced users. Allow users to tailor frequent actions. (e.g., keyboard shortcuts, customizable toolbars)
8.  **Aesthetic and minimalist design:** Dialogues should not contain information which is irrelevant or rarely needed. Every extra unit of information in a dialogue competes with the relevant units of information and diminishes their relative visibility. (e.g., a clean, uncluttered interface focusing on necessary elements)
9.  **Help users recognize, diagnose, and recover from errors:** Error messages should be expressed in plain language (no codes), precisely indicate the problem, and constructively suggest a solution. (e.g., "Invalid email format. Please enter a valid email address.")
10. **Help and documentation:** Although it is better if the system can be used without documentation, it may be necessary to provide help and documentation. Any such information should be easy to search, focused on the user's task, list concrete steps to be carried out, and not be too large. (e.g., FAQs, context-sensitive help buttons)

These heuristics are widely used in usability testing and evaluation to identify potential problems in user interface design.